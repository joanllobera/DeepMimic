
This installation guide works to run DeepMimics on a fresh Ubuntu20 installation.

It also assumes the use of anaconda to create the virtual environment (although not strictly needed).

---------------------------------
first version: 2023.02.09
reviewed with an installation form scratch:  2023.02.10

-------------------
considerations:
trying to install in ubuntu 22 is a nightmare due to the versions of python needed being very old.

when trying to install using Ubuntu 20, by default in Ubuntu python3.8 is installed.

Installing deepmimic using python3.8, which is the one build by default in Ubuntu 20. It builds, but then it does not work at runtime.


I therefore: install python 3.6, in ubuntu 20.


--------------------------

I do:

>sudo add-apt-repository ppa:deadsnakes/ppa
>sudo apt update
>sudo apt upgrade
>sudo apt install python3.6

Also, to compile you need the development headers. Do:

>sudo apt install python3.6-dev


Then install the dependencies listed in the readme:


``sudo apt install libgl1-mesa-dev libx11-dev libxrandr-dev libxi-dev``

``sudo apt install mesa-utils``

``sudo apt install clang``

``sudo apt install cmake``


you will also need

> sudo apt install mesa-common-dev
> sudo apt install freeglut3-dev
> sudo apt-get install libglew-dev



To run the install in DeepMimicCore:

If its a fresh installation of Ubuntu, you will also need a c++ compiler:

> sudo apt install build-essential

> sudo apt install git

then I fork and clone the DeepMimic repo

> git clone https://github.com/joanllobera/DeepMimic.git


Also, I will need patchelf to deal with the path, so:

I install PIP:
> sudo apt install pip
This allows you to install something needed by the isntallation script:
> sudo pip install patchelf


~/DeepMimic/DeepMimicCore$ sudo ./build.sh 
Then, following the README instructions, what is needed for the python packages:


- MPI 

  - Linux: `sudo apt install libopenmpi-dev`


Python:

- Python 3 (Already done, specifically we need python3.6)
- PyOpenGL (http://pyopengl.sourceforge.net/) 

``pip install PyOpenGL PyOpenGL_accelerate``

- Tensorflow (https://www.tensorflow.org/) ( Vesrion : 1.13.1 )

``pip install tensorflow==1.13.1`` 

IF IT DOESN't WORK, Alternative to install tensorflow using conda:


>  wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh
>  bash Anaconda3-2022.05-Linux-x86_64.sh


open a new terminal windows to load the conda .bash script
Then:

> conda update -n base -c defaults conda
if it doesn't work, do:
> conda update --all
if it still doesn't update, you can do:

conda install -n base conda=23.1.0 


> conda create --name mimic1 python=3.6
> conda activate mimic1

> pip install tensorflow==1.13.1 #important that it is in pip, not conda!

in this case you will also need:
> pip install opengl
> pip install pyopengl-accelerate

- MPI4Py (https://mpi4py.readthedocs.io/en/stable/install.html)

If it is not installed already
> pip install mpi4py



If you are on a remote machine, a remote desktop:

To Install Remote Desktop Protocol (RDP) server xrdp on the Ubuntu 20.04 desktop. 
To do so execute the following command:

> sudo apt install xrdp

Enable to start after reboot and run the remote desktop sharing server xrdp:

> sudo systemctl enable --now xrdp

Still on the Ubuntu 20.04 desktop, open a firewall port 3389 for an incoming traffic:

> sudo ufw allow from any to any port 3389 proto tcp


Move to Windows 10 host and open the Remote Desktop Connection client.  
(see https://linuxconfig.org/ubuntu-20-04-remote-desktop-access-from-windows-10)

And then, the runtime instruction, to test it works:

> python DeepMimic.py --arg_file args/run_humanoid3d_spinkick_args.txt

Note: The runtime will NOT Work using this RDP connection. It will create a segfault exception. 
However, running this locally on the computer should work.

Note2: i also changed the graphics drivers, from the XRDP default ones to nvidia ones.







